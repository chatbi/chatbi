/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/api/v1/connector/{data_source}/query': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Query */
    post: operations['query_api_v1_connector__data_source__query_post'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/connector/dry-plan': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Dry Run */
    post: operations['dry_run_api_v1_connector_dry_plan_post'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/connector/{data_source}/dry-plan': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Dry Plan For Data Source */
    post: operations['dry_plan_for_data_source_api_v1_connector__data_source__dry_plan_post'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/connector/{data_source}/validate/{rule_name}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Validate */
    post: operations['validate_api_v1_connector__data_source__validate__rule_name__post'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/chat/generate_sql': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Generate Sql */
    post: operations['generate_sql_api_v1_chat_generate_sql_post'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/chat/run_sql': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Run Sql */
    post: operations['run_sql_api_v1_chat_run_sql_post'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/chat/generate_visualize': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Text2Chart */
    post: operations['text2chart_api_v1_chat_generate_visualize_post'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/chat/table_schema': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Table Schema */
    get: operations['table_schema_api_v1_chat_table_schema_get'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/chat/completions': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Completions */
    post: operations['completions_api_v1_chat_completions_post'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/chat/conversation': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Conversation */
    get: operations['conversation_api_v1_chat_conversation_get'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/chat/cache/set': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Cache Init */
    post: operations['cache_init_api_v1_chat_cache_set_post'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/chat/cache/get': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Cache */
    get: operations['cache_api_v1_chat_cache_get_get'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/cube/query': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Query */
    post: operations['query_api_v1_cube_query_post'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/cube/meta': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Meta */
    get: operations['meta_api_v1_cube_meta_get'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Root */
    get: operations['root__get'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/health': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Health */
    get: operations['health_health_get'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/config': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Config */
    get: operations['config_config_get'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    /** Update Config */
    patch: operations['update_config_config_patch'];
    trace?: never;
  };
}
export type webhooks = Record<string, never>;
export interface components {
  schemas: {
    /** AgentMessageDTO */
    AgentMessageDTO: {
      /** Name */
      name: string;
      /** Id */
      id: string;
      /** Answer */
      answer: string | Record<string, never>;
      /** Reason */
      reason: string;
      /** Reasoning */
      reasoning: string;
      /** Type */
      type: string;
    };
    /** Audio */
    Audio: {
      /** Id */
      id: string;
    };
    /** BigQueryConnectionInfo */
    BigQueryConnectionInfo: {
      /**
       * Project Id
       * Format: password
       */
      project_id: string;
      /**
       * Dataset Id
       * Format: password
       */
      dataset_id: string;
      /**
       * Credentials
       * Format: password
       * @description Base64 encode `credentials.json`
       */
      credentials: string;
    };
    /** ChatCompletionAssistantMessageParam */
    ChatCompletionAssistantMessageParam: {
      /**
       * Role
       * @constant
       * @enum {string}
       */
      role: 'assistant';
      audio?: components['schemas']['Audio'] | null;
      /** Content */
      content?:
        | string
        | (
            | components['schemas']['ChatCompletionContentPartTextParam']
            | components['schemas']['ChatCompletionContentPartRefusalParam']
          )[]
        | null;
      function_call?: components['schemas']['FunctionCall'] | null;
      /** Name */
      name?: string;
      /** Refusal */
      refusal?: string | null;
      /** Tool Calls */
      tool_calls?: components['schemas']['ChatCompletionMessageToolCallParam'][];
    };
    /** ChatCompletionContentPartImageParam */
    ChatCompletionContentPartImageParam: {
      image_url: components['schemas']['ImageURL'];
      /**
       * Type
       * @constant
       * @enum {string}
       */
      type: 'image_url';
    };
    /** ChatCompletionContentPartInputAudioParam */
    ChatCompletionContentPartInputAudioParam: {
      input_audio: components['schemas']['InputAudio'];
      /**
       * Type
       * @constant
       * @enum {string}
       */
      type: 'input_audio';
    };
    /** ChatCompletionContentPartRefusalParam */
    ChatCompletionContentPartRefusalParam: {
      /** Refusal */
      refusal: string;
      /**
       * Type
       * @constant
       * @enum {string}
       */
      type: 'refusal';
    };
    /** ChatCompletionContentPartTextParam */
    ChatCompletionContentPartTextParam: {
      /** Text */
      text: string;
      /**
       * Type
       * @constant
       * @enum {string}
       */
      type: 'text';
    };
    /** ChatCompletionDeveloperMessageParam */
    ChatCompletionDeveloperMessageParam: {
      /** Content */
      content:
        | string
        | components['schemas']['ChatCompletionContentPartTextParam'][];
      /**
       * Role
       * @constant
       * @enum {string}
       */
      role: 'developer';
      /** Name */
      name?: string;
    };
    /** ChatCompletionFunctionMessageParam */
    ChatCompletionFunctionMessageParam: {
      /** Content */
      content: string | null;
      /** Name */
      name: string;
      /**
       * Role
       * @constant
       * @enum {string}
       */
      role: 'function';
    };
    /** ChatCompletionMessageToolCallParam */
    ChatCompletionMessageToolCallParam: {
      /** Id */
      id: string;
      function: components['schemas']['Function'];
      /**
       * Type
       * @constant
       * @enum {string}
       */
      type: 'function';
    };
    /** ChatCompletionSystemMessageParam */
    ChatCompletionSystemMessageParam: {
      /** Content */
      content:
        | string
        | components['schemas']['ChatCompletionContentPartTextParam'][];
      /**
       * Role
       * @constant
       * @enum {string}
       */
      role: 'system';
      /** Name */
      name?: string;
    };
    /** ChatCompletionToolMessageParam */
    ChatCompletionToolMessageParam: {
      /** Content */
      content:
        | string
        | components['schemas']['ChatCompletionContentPartTextParam'][];
      /**
       * Role
       * @constant
       * @enum {string}
       */
      role: 'tool';
      /** Tool Call Id */
      tool_call_id: string;
    };
    /** ChatCompletionUserMessageParam */
    ChatCompletionUserMessageParam: {
      /** Content */
      content:
        | string
        | (
            | components['schemas']['ChatCompletionContentPartTextParam']
            | components['schemas']['ChatCompletionContentPartImageParam']
            | components['schemas']['ChatCompletionContentPartInputAudioParam']
          )[];
      /**
       * Role
       * @constant
       * @enum {string}
       */
      role: 'user';
      /** Name */
      name?: string;
    };
    /**
     * CommonResponse
     * @description Common response model
     */
    CommonResponse: {
      data: components['schemas']['AgentMessageDTO'];
      /** Code */
      code: number;
    };
    /** ConfigModel */
    ConfigModel: {
      /** Diagnose */
      diagnose: boolean;
    };
    /** ConnectionUrl */
    ConnectionUrl: {
      /**
       * Connectionurl
       * Format: password
       */
      connectionUrl: string;
    };
    /** CreateCompletionsDTO */
    CreateCompletionsDTO: {
      /** Messages */
      messages: (
        | components['schemas']['ChatCompletionDeveloperMessageParam']
        | components['schemas']['ChatCompletionSystemMessageParam']
        | components['schemas']['ChatCompletionUserMessageParam']
        | components['schemas']['ChatCompletionAssistantMessageParam']
        | components['schemas']['ChatCompletionToolMessageParam']
        | components['schemas']['ChatCompletionFunctionMessageParam']
      )[];
      /**
       * N
       * @default 1
       */
      n: number | null;
      /**
       * Temperature
       * @default 0
       */
      temperature: number | null;
    };
    /** CubeApiDTO */
    CubeApiDTO: {
      query: components['schemas']['CubeQueryDTO'];
    };
    /** CubeFilterDTO */
    CubeFilterDTO: {
      /** Member */
      member: string;
      /** Operator */
      operator: string;
      /** Values */
      values: (string | number)[];
    };
    /** CubeQueryDTO */
    CubeQueryDTO: {
      /** Measures */
      measures: string[];
      /** Dimensions */
      dimensions: string[];
      /** Filters */
      filters?: components['schemas']['CubeFilterDTO'][];
      /** Timedimensions */
      timeDimensions?: components['schemas']['CubeTimeDimensionDTO'][];
      /**
       * Limit
       * @default 100
       */
      limit: number;
      /**
       * Offset
       * @default 0
       */
      offset: number;
      /** Order */
      order?: {
        [key: string]: string;
      };
      /** Timezone */
      timezone?: string;
    };
    /** CubeTimeDimensionDTO */
    CubeTimeDimensionDTO: {
      /** Dimension */
      dimension: string;
      /** Daterange */
      dateRange: string[];
      /** Granularity */
      granularity: string;
    };
    /**
     * DataSource
     * @enum {string}
     */
    DataSource:
      | 'duckdb'
      | 'bigquery'
      | 'clickhouse'
      | 'mssql'
      | 'mysql'
      | 'postgres'
      | 'snowflake'
      | 'trino';
    /** DryPlanDTO */
    DryPlanDTO: {
      /**
       * Manifeststr
       * @description Base64 manifest
       */
      manifestStr: string;
      /** Sql */
      sql: string;
    };
    /** DuckDbConnectionInfo */
    DuckDbConnectionInfo: {
      /**
       * Connection Url
       * Format: password
       */
      connection_url: string;
    };
    /** Function */
    Function: {
      /** Arguments */
      arguments: string;
      /** Name */
      name: string;
    };
    /** FunctionCall */
    FunctionCall: {
      /** Arguments */
      arguments: string;
      /** Name */
      name: string;
    };
    /**
     * GenerateSqlRequest
     * @description Generate sql request params
     */
    GenerateSqlRequest: {
      /**
       * Text
       * @description User input chat message
       */
      question?: string;
      /**
       * Chat ID
       * @description Chat id, default is None, Used for tracking the conversation, if is None, it will be a new conversation
       */
      id?: string | null;
    };
    /**
     * GenerateVisualizeRequest
     * @description Run sql request params
     */
    GenerateVisualizeRequest: {
      /**
       * Chat ID
       * @description Chat id, default is None, Used for tracking the conversation, if is None, it will be a new conversation
       */
      id?: string;
      /**
       * Data
       * @description Data for visualization
       */
      data?: unknown[] | null;
    };
    /** HTTPValidationError */
    HTTPValidationError: {
      /** Detail */
      detail?: components['schemas']['ValidationError'][];
    };
    /** ImageURL */
    ImageURL: {
      /** Url */
      url: string;
      /**
       * Detail
       * @enum {string}
       */
      detail?: 'auto' | 'low' | 'high';
    };
    /** InputAudio */
    InputAudio: {
      /** Data */
      data: string;
      /**
       * Format
       * @enum {string}
       */
      format: 'wav' | 'mp3';
    };
    /** MSSqlConnectionInfo */
    MSSqlConnectionInfo: {
      /**
       * Host
       * Format: password
       */
      host: string;
      /**
       * Port
       * Format: password
       */
      port: string;
      /**
       * Database
       * Format: password
       */
      database: string;
      /**
       * User
       * Format: password
       */
      user: string;
      /**
       * Password
       * Format: password
       */
      password: string;
      /**
       * Driver
       * @description On Mac and Linux this is usually `FreeTDS. On Windows, it is usually `ODBC Driver 18 for SQL Server`
       * @default FreeTDS
       */
      driver: string;
    };
    /** MySqlConnectionInfo */
    MySqlConnectionInfo: {
      /**
       * Host
       * Format: password
       */
      host: string;
      /**
       * Port
       * Format: password
       */
      port: string;
      /**
       * Database
       * Format: password
       */
      database: string;
      /**
       * User
       * Format: password
       */
      user: string;
      /**
       * Password
       * Format: password
       */
      password: string;
    };
    /** PostgresConnectionInfo */
    PostgresConnectionInfo: {
      /**
       * Host
       * Format: password
       */
      host: string;
      /**
       * Port
       * Format: password
       */
      port: string;
      /**
       * Database
       * Format: password
       */
      database: string;
      /**
       * User
       * Format: password
       */
      user: string;
      /**
       * Password
       * Format: password
       */
      password: string;
    };
    /** QueryDTO */
    QueryDTO: {
      /** Sql */
      sql: string;
      /**
       * Manifeststr
       * @description Base64 manifest
       */
      manifestStr: string;
      /** Connectioninfo */
      connectionInfo:
        | components['schemas']['DuckDbConnectionInfo']
        | components['schemas']['BigQueryConnectionInfo']
        | components['schemas']['ConnectionUrl']
        | components['schemas']['MSSqlConnectionInfo']
        | components['schemas']['MySqlConnectionInfo']
        | components['schemas']['PostgresConnectionInfo']
        | components['schemas']['SnowflakeConnectionInfo']
        | components['schemas']['TrinoConnectionInfo'];
    };
    /** RunSqlData */
    RunSqlData: {
      /** Data */
      data: string;
      /** Should Visualize */
      should_visualize: boolean;
    };
    /**
     * RunSqlRequest
     * @description Run sql request params
     */
    RunSqlRequest: {
      /**
       * Chat ID
       * @description Chat id, default is None, Used for tracking the conversation, if is None, it will be a new conversation
       */
      id?: string;
      /**
       * SQL
       * @description SQL query, default is None, if is None, it will get the SQL query from the previous step
       */
      sql?: string | null;
    };
    /**
     * RunSqlResponse
     * @description Run SQL response model
     */
    RunSqlResponse: {
      data: components['schemas']['RunSqlData'];
      /** Code */
      code: number;
    };
    /** SnowflakeConnectionInfo */
    SnowflakeConnectionInfo: {
      /**
       * User
       * Format: password
       */
      user: string;
      /**
       * Password
       * Format: password
       */
      password: string;
      /**
       * Account
       * Format: password
       */
      account: string;
      /**
       * Database
       * Format: password
       */
      database: string;
      /**
       * Schema
       * Format: password
       */
      schema: string;
    };
    /** TrinoConnectionInfo */
    TrinoConnectionInfo: {
      /**
       * Host
       * Format: password
       */
      host: string;
      /**
       * Port
       * Format: password
       * @default 8080
       */
      port: string;
      /**
       * Catalog
       * Format: password
       */
      catalog: string;
      /**
       * Schema
       * Format: password
       */
      schema: string;
      /** User */
      user?: string | null;
      /** Password */
      password?: string | null;
    };
    /** ValidateDTO */
    ValidateDTO: {
      /**
       * Manifeststr
       * @description Base64 manifest
       */
      manifestStr: string;
      /** Parameters */
      parameters: {
        [key: string]: string;
      };
      /** Connectioninfo */
      connectionInfo:
        | components['schemas']['DuckDbConnectionInfo']
        | components['schemas']['BigQueryConnectionInfo']
        | components['schemas']['ConnectionUrl']
        | components['schemas']['MSSqlConnectionInfo']
        | components['schemas']['MySqlConnectionInfo']
        | components['schemas']['PostgresConnectionInfo']
        | components['schemas']['SnowflakeConnectionInfo']
        | components['schemas']['TrinoConnectionInfo'];
    };
    /** ValidationError */
    ValidationError: {
      /** Location */
      loc: (string | number)[];
      /** Message */
      msg: string;
      /** Error Type */
      type: string;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
  query_api_v1_connector__data_source__query_post: {
    parameters: {
      query?: {
        dryRun?: boolean;
        limit?: number;
      };
      header?: never;
      path: {
        data_source: components['schemas']['DataSource'];
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['QueryDTO'];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': unknown;
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  dry_run_api_v1_connector_dry_plan_post: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['DryPlanDTO'];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': string;
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  dry_plan_for_data_source_api_v1_connector__data_source__dry_plan_post: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        data_source: components['schemas']['DataSource'];
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['DryPlanDTO'];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': string;
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  validate_api_v1_connector__data_source__validate__rule_name__post: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        data_source: components['schemas']['DataSource'];
        rule_name: string;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['ValidateDTO'];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': unknown;
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  generate_sql_api_v1_chat_generate_sql_post: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['GenerateSqlRequest'];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['CommonResponse'];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  run_sql_api_v1_chat_run_sql_post: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['RunSqlRequest'];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['RunSqlResponse'];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  text2chart_api_v1_chat_generate_visualize_post: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['GenerateVisualizeRequest'];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['CommonResponse'];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  table_schema_api_v1_chat_table_schema_get: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': unknown;
        };
      };
    };
  };
  completions_api_v1_chat_completions_post: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateCompletionsDTO'];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': unknown;
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  conversation_api_v1_chat_conversation_get: {
    parameters: {
      query?: {
        /** @description Chat ID */
        chat_id?: string;
        /** @description Limit */
        limit?: number;
        /** @description Offset */
        offset?: number;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': unknown;
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  cache_init_api_v1_chat_cache_set_post: {
    parameters: {
      query: {
        id: string;
        value?: string | null;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': unknown;
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  cache_api_v1_chat_cache_get_get: {
    parameters: {
      query: {
        id: string;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': unknown;
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  query_api_v1_cube_query_post: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['CubeApiDTO'];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': unknown;
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  meta_api_v1_cube_meta_get: {
    parameters: {
      query?: {
        table_name?: string | null;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': unknown;
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  root__get: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': unknown;
        };
      };
    };
  };
  health_health_get: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': unknown;
        };
      };
    };
  };
  config_config_get: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': unknown;
        };
      };
    };
  };
  update_config_config_patch: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['ConfigModel'];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': unknown;
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
}
